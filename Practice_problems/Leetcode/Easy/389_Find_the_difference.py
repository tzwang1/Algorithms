"""
Find the Difference
Difficulty:Easy

Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:

Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.
"""
####################################################
'''
Ideas: 
Brute force - iterate through t, and for each value in t check whether that value is in s. Doesn't deal with duplicates well. To deal
with duplicates need to mark the already used indices with some sort of value.
O(n^2) time, where n is the length of the string t
O(1) space

Optimized - Store values of t and s in a hashtable, with key as the char and value as the number of times it appears.
Iterate through the keys in the hashtable storing the values of t and for each key-value pair, check s for the same key-value pair. 
If there is a key that appears in t, but not in s or the value of the key is different between t and s, then that is the extra letter.
O(n) time
O(n) space

Optimized - Sort both strings, iterate through both at the same time, when there is a mismatch between strings, that is the extra string,
or the extra string is the very last string in t
O(nlogn) time to sort
O(1) space depending on sorting algorithm - heap sort
'''

class Solution(object):
    def findTheDifference(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        s_dict = self.get_char_counts(s)
        t_dict = self.get_char_counts(t)

        for key in t_dict:
            if key not in s_dict or s_dict[key] != t_dict[key]:
                return key
    
    def get_char_counts(self, string):
        counts = {}
        for c in string:
            if c in counts:
                counts[c]+=1
            else:
                counts[c] = 1
        
        return counts
